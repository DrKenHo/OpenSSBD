#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Aug  6 14:58:47 2013 by generateDS.py version 2.10a.
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Info(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('bdmlID', ['UUIDType', 'xsd:string'], 0),
        MemberSpec_('title', 'xsd:string', 0),
        MemberSpec_('version', 'xsd:positiveInteger', 0),
        MemberSpec_('release', 'xsd:date', 0),
        MemberSpec_('license', 'xsd:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, bdmlID=None, title=None, version=None, release=None, license=None):
        self.bdmlID = bdmlID
        self.title = title
        self.version = version
        if isinstance(release, basestring):
            initvalue_ = datetime_.datetime.strptime(release, '%Y-%m-%d').date()
        else:
            initvalue_ = release
        self.release = initvalue_
        self.license = license
    def factory(*args_, **kwargs_):
        if Info.subclass:
            return Info.subclass(*args_, **kwargs_)
        else:
            return Info(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_bdmlID(self): return self.bdmlID
    def set_bdmlID(self, bdmlID): self.bdmlID = bdmlID
    def validate_UUIDType(self, value):
        # Validate type UUIDType, a restriction on xsd:string.
        pass
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_release(self): return self.release
    def set_release(self, release): self.release = release
    def get_license(self): return self.license
    def set_license(self, license): self.license = license
    def hasContent_(self):
        if (
            self.bdmlID is not None or
            self.title is not None or
            self.version is not None or
            self.release is not None or
            self.license is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Info', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Info')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Info'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Info', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.bdmlID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbdmlID>%s</%sbdmlID>%s' % (namespace_, self.gds_format_string(quote_xml(self.bdmlID).encode(ExternalEncoding), input_name='bdmlID'), namespace_, eol_))
        if self.title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stitle>%s</%stitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_, eol_))
        if self.version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespace_, self.gds_format_integer(self.version, input_name='version'), namespace_, eol_))
        if self.release is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srelease>%s</%srelease>%s' % (namespace_, self.gds_format_date(self.release, input_name='release'), namespace_, eol_))
        if self.license is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slicense>%s</%slicense>%s' % (namespace_, self.gds_format_string(quote_xml(self.license).encode(ExternalEncoding), input_name='license'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='Info'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.bdmlID is not None:
            showIndent(outfile, level)
            outfile.write('bdmlID=%s,\n' % quote_python(self.bdmlID).encode(ExternalEncoding))
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version=%d,\n' % self.version)
        if self.release is not None:
            showIndent(outfile, level)
            outfile.write('release=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.release, input_name='release'))
        if self.license is not None:
            showIndent(outfile, level)
            outfile.write('license=%s,\n' % quote_python(self.license).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'bdmlID':
            bdmlID_ = child_.text
            bdmlID_ = self.gds_validate_string(bdmlID_, node, 'bdmlID')
            self.bdmlID = bdmlID_
            self.validate_UUIDType(self.bdmlID)    # validate type UUIDType
        elif nodeName_ == 'title':
            title_ = child_.text
            title_ = self.gds_validate_string(title_, node, 'title')
            self.title = title_
        elif nodeName_ == 'version':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'version')
            self.version = ival_
        elif nodeName_ == 'release':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.release = dval_
        elif nodeName_ == 'license':
            license_ = child_.text
            license_ = self.gds_validate_string(license_, node, 'license')
            self.license = license_
# end class Info


class Summary(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('description', 'xsd:string', 0),
        MemberSpec_('organism', 'xsd:string', 0),
        MemberSpec_('datatype', 'xsd:string', 0),
        MemberSpec_('identifier', 'xsd:string', 0),
        MemberSpec_('basedon', ['BasedOn', 'xsd:string'], 0),
        MemberSpec_('contributors', 'xsd:string', 0),
        MemberSpec_('citation', 'xsd:string', 0),
        MemberSpec_('PMID', 'xsd:positiveInteger', 0),
        MemberSpec_('dblink', 'xsd:anyURI', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, description=None, organism=None, datatype=None, identifier=None, basedon=None, contributors=None, citation=None, PMID=None, dblink=None):
        self.description = description
        self.organism = organism
        self.datatype = datatype
        self.identifier = identifier
        self.basedon = basedon
        self.contributors = contributors
        self.citation = citation
        self.PMID = PMID
        self.dblink = dblink
    def factory(*args_, **kwargs_):
        if Summary.subclass:
            return Summary.subclass(*args_, **kwargs_)
        else:
            return Summary(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_organism(self): return self.organism
    def set_organism(self, organism): self.organism = organism
    def get_datatype(self): return self.datatype
    def set_datatype(self, datatype): self.datatype = datatype
    def get_identifier(self): return self.identifier
    def set_identifier(self, identifier): self.identifier = identifier
    def get_basedon(self): return self.basedon
    def set_basedon(self, basedon): self.basedon = basedon
    def validate_BasedOn(self, value):
        # Validate type BasedOn, a restriction on xsd:string.
        pass
    def get_contributors(self): return self.contributors
    def set_contributors(self, contributors): self.contributors = contributors
    def get_citation(self): return self.citation
    def set_citation(self, citation): self.citation = citation
    def get_PMID(self): return self.PMID
    def set_PMID(self, PMID): self.PMID = PMID
    def get_dblink(self): return self.dblink
    def set_dblink(self, dblink): self.dblink = dblink
    def hasContent_(self):
        if (
            self.description is not None or
            self.organism is not None or
            self.datatype is not None or
            self.identifier is not None or
            self.basedon is not None or
            self.contributors is not None or
            self.citation is not None or
            self.PMID is not None or
            self.dblink is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Summary', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Summary')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Summary'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Summary', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_, eol_))
        if self.organism is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorganism>%s</%sorganism>%s' % (namespace_, self.gds_format_string(quote_xml(self.organism).encode(ExternalEncoding), input_name='organism'), namespace_, eol_))
        if self.datatype is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatatype>%s</%sdatatype>%s' % (namespace_, self.gds_format_string(quote_xml(self.datatype).encode(ExternalEncoding), input_name='datatype'), namespace_, eol_))
        if self.identifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentifier>%s</%sidentifier>%s' % (namespace_, self.gds_format_string(quote_xml(self.identifier).encode(ExternalEncoding), input_name='identifier'), namespace_, eol_))
        if self.basedon is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbasedon>%s</%sbasedon>%s' % (namespace_, self.gds_format_string(quote_xml(self.basedon).encode(ExternalEncoding), input_name='basedon'), namespace_, eol_))
        if self.contributors is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontributors>%s</%scontributors>%s' % (namespace_, self.gds_format_string(quote_xml(self.contributors).encode(ExternalEncoding), input_name='contributors'), namespace_, eol_))
        if self.citation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scitation>%s</%scitation>%s' % (namespace_, self.gds_format_string(quote_xml(self.citation).encode(ExternalEncoding), input_name='citation'), namespace_, eol_))
        if self.PMID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPMID>%s</%sPMID>%s' % (namespace_, self.gds_format_integer(self.PMID, input_name='PMID'), namespace_, eol_))
        if self.dblink is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdblink>%s</%sdblink>%s' % (namespace_, self.gds_format_string(quote_xml(self.dblink).encode(ExternalEncoding), input_name='dblink'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='Summary'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.organism is not None:
            showIndent(outfile, level)
            outfile.write('organism=%s,\n' % quote_python(self.organism).encode(ExternalEncoding))
        if self.datatype is not None:
            showIndent(outfile, level)
            outfile.write('datatype=%s,\n' % quote_python(self.datatype).encode(ExternalEncoding))
        if self.identifier is not None:
            showIndent(outfile, level)
            outfile.write('identifier=%s,\n' % quote_python(self.identifier).encode(ExternalEncoding))
        if self.basedon is not None:
            showIndent(outfile, level)
            outfile.write('basedon=%s,\n' % quote_python(self.basedon).encode(ExternalEncoding))
        if self.contributors is not None:
            showIndent(outfile, level)
            outfile.write('contributors=%s,\n' % quote_python(self.contributors).encode(ExternalEncoding))
        if self.citation is not None:
            showIndent(outfile, level)
            outfile.write('citation=%s,\n' % quote_python(self.citation).encode(ExternalEncoding))
        if self.PMID is not None:
            showIndent(outfile, level)
            outfile.write('PMID=%d,\n' % self.PMID)
        if self.dblink is not None:
            showIndent(outfile, level)
            outfile.write('dblink=%s,\n' % quote_python(self.dblink).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'organism':
            organism_ = child_.text
            organism_ = self.gds_validate_string(organism_, node, 'organism')
            self.organism = organism_
        elif nodeName_ == 'datatype':
            datatype_ = child_.text
            datatype_ = self.gds_validate_string(datatype_, node, 'datatype')
            self.datatype = datatype_
        elif nodeName_ == 'identifier':
            identifier_ = child_.text
            identifier_ = self.gds_validate_string(identifier_, node, 'identifier')
            self.identifier = identifier_
        elif nodeName_ == 'basedon':
            basedon_ = child_.text
            basedon_ = self.gds_validate_string(basedon_, node, 'basedon')
            self.basedon = basedon_
            self.validate_BasedOn(self.basedon)    # validate type BasedOn
        elif nodeName_ == 'contributors':
            contributors_ = child_.text
            contributors_ = self.gds_validate_string(contributors_, node, 'contributors')
            self.contributors = contributors_
        elif nodeName_ == 'citation':
            citation_ = child_.text
            citation_ = self.gds_validate_string(citation_, node, 'citation')
            self.citation = citation_
        elif nodeName_ == 'PMID':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PMID')
            self.PMID = ival_
        elif nodeName_ == 'dblink':
            dblink_ = child_.text
            dblink_ = self.gds_validate_string(dblink_, node, 'dblink')
            self.dblink = dblink_
# end class Summary


class Contact(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('name', 'xsd:string', 0),
        MemberSpec_('E_mail', 'xsd:string', 0),
        MemberSpec_('phone', 'xsd:string', 0),
        MemberSpec_('URL', 'xsd:anyURI', 0),
        MemberSpec_('organization', 'xsd:string', 0),
        MemberSpec_('department', 'xsd:string', 0),
        MemberSpec_('laboratory', 'xsd:string', 0),
        MemberSpec_('address', 'xsd:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, name=None, E_mail=None, phone=None, URL=None, organization=None, department=None, laboratory=None, address=None):
        self.name = name
        self.E_mail = E_mail
        self.phone = phone
        self.URL = URL
        self.organization = organization
        self.department = department
        self.laboratory = laboratory
        self.address = address
    def factory(*args_, **kwargs_):
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_E_mail(self): return self.E_mail
    def set_E_mail(self, E_mail): self.E_mail = E_mail
    def get_phone(self): return self.phone
    def set_phone(self, phone): self.phone = phone
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def get_organization(self): return self.organization
    def set_organization(self, organization): self.organization = organization
    def get_department(self): return self.department
    def set_department(self, department): self.department = department
    def get_laboratory(self): return self.laboratory
    def set_laboratory(self, laboratory): self.laboratory = laboratory
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def hasContent_(self):
        if (
            self.name is not None or
            self.E_mail is not None or
            self.phone is not None or
            self.URL is not None or
            self.organization is not None or
            self.department is not None or
            self.laboratory is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Contact', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_, eol_))
        if self.E_mail is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sE-mail>%s</%sE-mail>%s' % (namespace_, self.gds_format_string(quote_xml(self.E_mail).encode(ExternalEncoding), input_name='E-mail'), namespace_, eol_))
        if self.phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sphone>%s</%sphone>%s' % (namespace_, self.gds_format_string(quote_xml(self.phone).encode(ExternalEncoding), input_name='phone'), namespace_, eol_))
        if self.URL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sURL>%s</%sURL>%s' % (namespace_, self.gds_format_string(quote_xml(self.URL).encode(ExternalEncoding), input_name='URL'), namespace_, eol_))
        if self.organization is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorganization>%s</%sorganization>%s' % (namespace_, self.gds_format_string(quote_xml(self.organization).encode(ExternalEncoding), input_name='organization'), namespace_, eol_))
        if self.department is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdepartment>%s</%sdepartment>%s' % (namespace_, self.gds_format_string(quote_xml(self.department).encode(ExternalEncoding), input_name='department'), namespace_, eol_))
        if self.laboratory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slaboratory>%s</%slaboratory>%s' % (namespace_, self.gds_format_string(quote_xml(self.laboratory).encode(ExternalEncoding), input_name='laboratory'), namespace_, eol_))
        if self.address is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saddress>%s</%saddress>%s' % (namespace_, self.gds_format_string(quote_xml(self.address).encode(ExternalEncoding), input_name='address'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='Contact'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.E_mail is not None:
            showIndent(outfile, level)
            outfile.write('E_mail=%s,\n' % quote_python(self.E_mail).encode(ExternalEncoding))
        if self.phone is not None:
            showIndent(outfile, level)
            outfile.write('phone=%s,\n' % quote_python(self.phone).encode(ExternalEncoding))
        if self.URL is not None:
            showIndent(outfile, level)
            outfile.write('URL=%s,\n' % quote_python(self.URL).encode(ExternalEncoding))
        if self.organization is not None:
            showIndent(outfile, level)
            outfile.write('organization=%s,\n' % quote_python(self.organization).encode(ExternalEncoding))
        if self.department is not None:
            showIndent(outfile, level)
            outfile.write('department=%s,\n' % quote_python(self.department).encode(ExternalEncoding))
        if self.laboratory is not None:
            showIndent(outfile, level)
            outfile.write('laboratory=%s,\n' % quote_python(self.laboratory).encode(ExternalEncoding))
        if self.address is not None:
            showIndent(outfile, level)
            outfile.write('address=%s,\n' % quote_python(self.address).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'E-mail':
            E_mail_ = child_.text
            E_mail_ = self.gds_validate_string(E_mail_, node, 'E_mail')
            self.E_mail = E_mail_
        elif nodeName_ == 'phone':
            phone_ = child_.text
            phone_ = self.gds_validate_string(phone_, node, 'phone')
            self.phone = phone_
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL = URL_
        elif nodeName_ == 'organization':
            organization_ = child_.text
            organization_ = self.gds_validate_string(organization_, node, 'organization')
            self.organization = organization_
        elif nodeName_ == 'department':
            department_ = child_.text
            department_ = self.gds_validate_string(department_, node, 'department')
            self.department = department_
        elif nodeName_ == 'laboratory':
            laboratory_ = child_.text
            laboratory_ = self.gds_validate_string(laboratory_, node, 'laboratory')
            self.laboratory = laboratory_
        elif nodeName_ == 'address':
            address_ = child_.text
            address_ = self.gds_validate_string(address_, node, 'address')
            self.address = address_
# end class Contact


class Methods(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('summary', 'xsd:string', 0),
        MemberSpec_('source', 'xsd:anyURI', 0),
        MemberSpec_('pdpml', 'xsd:anyURI', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, summary=None, source=None, pdpml=None):
        self.summary = summary
        self.source = source
        self.pdpml = pdpml
    def factory(*args_, **kwargs_):
        if Methods.subclass:
            return Methods.subclass(*args_, **kwargs_)
        else:
            return Methods(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_summary(self): return self.summary
    def set_summary(self, summary): self.summary = summary
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_pdpml(self): return self.pdpml
    def set_pdpml(self, pdpml): self.pdpml = pdpml
    def hasContent_(self):
        if (
            self.summary is not None or
            self.source is not None or
            self.pdpml is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Methods', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Methods')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Methods'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Methods', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.summary is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssummary>%s</%ssummary>%s' % (namespace_, self.gds_format_string(quote_xml(self.summary).encode(ExternalEncoding), input_name='summary'), namespace_, eol_))
        if self.source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource>%s</%ssource>%s' % (namespace_, self.gds_format_string(quote_xml(self.source).encode(ExternalEncoding), input_name='source'), namespace_, eol_))
        if self.pdpml is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spdpml>%s</%spdpml>%s' % (namespace_, self.gds_format_string(quote_xml(self.pdpml).encode(ExternalEncoding), input_name='pdpml'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='Methods'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.summary is not None:
            showIndent(outfile, level)
            outfile.write('summary=%s,\n' % quote_python(self.summary).encode(ExternalEncoding))
        if self.source is not None:
            showIndent(outfile, level)
            outfile.write('source=%s,\n' % quote_python(self.source).encode(ExternalEncoding))
        if self.pdpml is not None:
            showIndent(outfile, level)
            outfile.write('pdpml=%s,\n' % quote_python(self.pdpml).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'summary':
            summary_ = child_.text
            summary_ = self.gds_validate_string(summary_, node, 'summary')
            self.summary = summary_
        elif nodeName_ == 'source':
            source_ = child_.text
            source_ = self.gds_validate_string(source_, node, 'source')
            self.source = source_
        elif nodeName_ == 'pdpml':
            pdpml_ = child_.text
            pdpml_ = self.gds_validate_string(pdpml_, node, 'pdpml')
            self.pdpml = pdpml_
# end class Methods


class ScaleUnit(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('xScale', 'xsd:double', 0),
        MemberSpec_('yScale', 'xsd:double', 0),
        MemberSpec_('zScale', 'xsd:double', 0),
        MemberSpec_('xyzUnit', ['UnitKind', 'xsd:string'], 0),
        MemberSpec_('tScale', 'xsd:double', 0),
        MemberSpec_('tUnit', ['tUnitKind', 'xsd:string'], 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, xScale=None, yScale=None, zScale=None, xyzUnit=None, tScale=None, tUnit=None):
        self.xScale = xScale
        self.yScale = yScale
        self.zScale = zScale
        self.xyzUnit = xyzUnit
        self.tScale = tScale
        self.tUnit = tUnit
    def factory(*args_, **kwargs_):
        if ScaleUnit.subclass:
            return ScaleUnit.subclass(*args_, **kwargs_)
        else:
            return ScaleUnit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_xScale(self): return self.xScale
    def set_xScale(self, xScale): self.xScale = xScale
    def get_yScale(self): return self.yScale
    def set_yScale(self, yScale): self.yScale = yScale
    def get_zScale(self): return self.zScale
    def set_zScale(self, zScale): self.zScale = zScale
    def get_xyzUnit(self): return self.xyzUnit
    def set_xyzUnit(self, xyzUnit): self.xyzUnit = xyzUnit
    def validate_UnitKind(self, value):
        # Validate type UnitKind, a restriction on xsd:string.
        pass
    def get_tScale(self): return self.tScale
    def set_tScale(self, tScale): self.tScale = tScale
    def get_tUnit(self): return self.tUnit
    def set_tUnit(self, tUnit): self.tUnit = tUnit
    def validate_tUnitKind(self, value):
        # Validate type tUnitKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.xScale is not None or
            self.yScale is not None or
            self.zScale is not None or
            self.xyzUnit is not None or
            self.tScale is not None or
            self.tUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ScaleUnit', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ScaleUnit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ScaleUnit'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ScaleUnit', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.xScale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sxScale>%s</%sxScale>%s' % (namespace_, self.gds_format_double(self.xScale, input_name='xScale'), namespace_, eol_))
        if self.yScale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%syScale>%s</%syScale>%s' % (namespace_, self.gds_format_double(self.yScale, input_name='yScale'), namespace_, eol_))
        if self.zScale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szScale>%s</%szScale>%s' % (namespace_, self.gds_format_double(self.zScale, input_name='zScale'), namespace_, eol_))
        if self.xyzUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sxyzUnit>%s</%sxyzUnit>%s' % (namespace_, self.gds_format_string(quote_xml(self.xyzUnit).encode(ExternalEncoding), input_name='xyzUnit'), namespace_, eol_))
        if self.tScale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stScale>%s</%stScale>%s' % (namespace_, self.gds_format_double(self.tScale, input_name='tScale'), namespace_, eol_))
        if self.tUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stUnit>%s</%stUnit>%s' % (namespace_, self.gds_format_string(quote_xml(self.tUnit).encode(ExternalEncoding), input_name='tUnit'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ScaleUnit'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.xScale is not None:
            showIndent(outfile, level)
            outfile.write('xScale=%e,\n' % self.xScale)
        if self.yScale is not None:
            showIndent(outfile, level)
            outfile.write('yScale=%e,\n' % self.yScale)
        if self.zScale is not None:
            showIndent(outfile, level)
            outfile.write('zScale=%e,\n' % self.zScale)
        if self.xyzUnit is not None:
            showIndent(outfile, level)
            outfile.write('xyzUnit=%s,\n' % quote_python(self.xyzUnit).encode(ExternalEncoding))
        if self.tScale is not None:
            showIndent(outfile, level)
            outfile.write('tScale=%e,\n' % self.tScale)
        if self.tUnit is not None:
            showIndent(outfile, level)
            outfile.write('tUnit=%s,\n' % quote_python(self.tUnit).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'xScale':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'xScale')
            self.xScale = fval_
        elif nodeName_ == 'yScale':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'yScale')
            self.yScale = fval_
        elif nodeName_ == 'zScale':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'zScale')
            self.zScale = fval_
        elif nodeName_ == 'xyzUnit':
            xyzUnit_ = child_.text
            xyzUnit_ = self.gds_validate_string(xyzUnit_, node, 'xyzUnit')
            self.xyzUnit = xyzUnit_
            self.validate_UnitKind(self.xyzUnit)    # validate type UnitKind
        elif nodeName_ == 'tScale':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'tScale')
            self.tScale = fval_
        elif nodeName_ == 'tUnit':
            tUnit_ = child_.text
            tUnit_ = self.gds_validate_string(tUnit_, node, 'tUnit')
            self.tUnit = tUnit_
            self.validate_tUnitKind(self.tUnit)    # validate type tUnitKind
# end class ScaleUnit


class Object(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('objectName', 'xsd:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, objectName=None):
        self.objectName = objectName
    def factory(*args_, **kwargs_):
        if Object.subclass:
            return Object.subclass(*args_, **kwargs_)
        else:
            return Object(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_objectName(self): return self.objectName
    def set_objectName(self, objectName): self.objectName = objectName
    def hasContent_(self):
        if (
            self.objectName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Object', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Object')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Object'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Object', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.objectName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjectName>%s</%sobjectName>%s' % (namespace_, self.gds_format_string(quote_xml(self.objectName).encode(ExternalEncoding), input_name='objectName'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='Object'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.objectName is not None:
            showIndent(outfile, level)
            outfile.write('objectName=%s,\n' % quote_python(self.objectName).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'objectName':
            objectName_ = child_.text
            objectName_ = self.gds_validate_string(objectName_, node, 'objectName')
            self.objectName = objectName_
# end class Object


class Feature(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('featureName', 'xsd:string', 0),
        MemberSpec_('featureScale', 'xsd:double', 0),
        MemberSpec_('featureUnit', ['UnitKind', 'xsd:string'], 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, featureName=None, featureScale=None, featureUnit=None):
        self.featureName = featureName
        self.featureScale = featureScale
        self.featureUnit = featureUnit
    def factory(*args_, **kwargs_):
        if Feature.subclass:
            return Feature.subclass(*args_, **kwargs_)
        else:
            return Feature(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_featureName(self): return self.featureName
    def set_featureName(self, featureName): self.featureName = featureName
    def get_featureScale(self): return self.featureScale
    def set_featureScale(self, featureScale): self.featureScale = featureScale
    def get_featureUnit(self): return self.featureUnit
    def set_featureUnit(self, featureUnit): self.featureUnit = featureUnit
    def validate_UnitKind(self, value):
        # Validate type UnitKind, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.featureName is not None or
            self.featureScale is not None or
            self.featureUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Feature', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Feature')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Feature'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Feature', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.featureName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfeatureName>%s</%sfeatureName>%s' % (namespace_, self.gds_format_string(quote_xml(self.featureName).encode(ExternalEncoding), input_name='featureName'), namespace_, eol_))
        if self.featureScale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfeatureScale>%s</%sfeatureScale>%s' % (namespace_, self.gds_format_double(self.featureScale, input_name='featureScale'), namespace_, eol_))
        if self.featureUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfeatureUnit>%s</%sfeatureUnit>%s' % (namespace_, self.gds_format_string(quote_xml(self.featureUnit).encode(ExternalEncoding), input_name='featureUnit'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='Feature'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.featureName is not None:
            showIndent(outfile, level)
            outfile.write('featureName=%s,\n' % quote_python(self.featureName).encode(ExternalEncoding))
        if self.featureScale is not None:
            showIndent(outfile, level)
            outfile.write('featureScale=%e,\n' % self.featureScale)
        if self.featureUnit is not None:
            showIndent(outfile, level)
            outfile.write('featureUnit=%s,\n' % quote_python(self.featureUnit).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'featureName':
            featureName_ = child_.text
            featureName_ = self.gds_validate_string(featureName_, node, 'featureName')
            self.featureName = featureName_
        elif nodeName_ == 'featureScale':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'featureScale')
            self.featureScale = fval_
        elif nodeName_ == 'featureUnit':
            featureUnit_ = child_.text
            featureUnit_ = self.gds_validate_string(featureUnit_, node, 'featureUnit')
            self.featureUnit = featureUnit_
            self.validate_UnitKind(self.featureUnit)    # validate type UnitKind
# end class Feature


class Property(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('featureRef', 'xsd:string', 0),
        MemberSpec_('featureValue', 'xsd:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, featureRef=None, featureValue=None):
        self.featureRef = featureRef
        self.featureValue = featureValue
    def factory(*args_, **kwargs_):
        if Property.subclass:
            return Property.subclass(*args_, **kwargs_)
        else:
            return Property(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_featureRef(self): return self.featureRef
    def set_featureRef(self, featureRef): self.featureRef = featureRef
    def get_featureValue(self): return self.featureValue
    def set_featureValue(self, featureValue): self.featureValue = featureValue
    def hasContent_(self):
        if (
            self.featureRef is not None or
            self.featureValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Property', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Property')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Property'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Property', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.featureRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfeatureRef>%s</%sfeatureRef>%s' % (namespace_, self.gds_format_string(quote_xml(self.featureRef).encode(ExternalEncoding), input_name='featureRef'), namespace_, eol_))
        if self.featureValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfeatureValue>%s</%sfeatureValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.featureValue).encode(ExternalEncoding), input_name='featureValue'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='Property'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.featureRef is not None:
            showIndent(outfile, level)
            outfile.write('featureRef=%s,\n' % quote_python(self.featureRef).encode(ExternalEncoding))
        if self.featureValue is not None:
            showIndent(outfile, level)
            outfile.write('featureValue=%s,\n' % quote_python(self.featureValue).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'featureRef':
            featureRef_ = child_.text
            featureRef_ = self.gds_validate_string(featureRef_, node, 'featureRef')
            self.featureRef = featureRef_
        elif nodeName_ == 'featureValue':
            featureValue_ = child_.text
            featureValue_ = self.gds_validate_string(featureValue_, node, 'featureValue')
            self.featureValue = featureValue_
# end class Property


class Point(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('coords', 'xsd:string', 1),
        MemberSpec_('property', 'Property', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, coords=None, property=None):
        if coords is None:
            self.coords = []
        else:
            self.coords = coords
        if property is None:
            self.property = []
        else:
            self.property = property
    def factory(*args_, **kwargs_):
        if Point.subclass:
            return Point.subclass(*args_, **kwargs_)
        else:
            return Point(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_coords(self): return self.coords
    def set_coords(self, coords): self.coords = coords
    def add_coords(self, value): self.coords.append(value)
    def insert_coords(self, index, value): self.coords[index] = value
    def get_property(self): return self.property
    def set_property(self, property): self.property = property
    def add_property(self, value): self.property.append(value)
    def insert_property(self, index, value): self.property[index] = value
    def hasContent_(self):
        if (
            self.coords or
            self.property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Point', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Point')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Point'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Point', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for coords_ in self.coords:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scoords>%s</%scoords>%s' % (namespace_, self.gds_format_string(quote_xml(coords_).encode(ExternalEncoding), input_name='coords'), namespace_, eol_))
        for property_ in self.property:
            property_.export(outfile, level, namespace_, name_='property', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Point'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('coords=[\n')
        level += 1
        for coords_ in self.coords:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(coords_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('property=[\n')
        level += 1
        for property_ in self.property:
            showIndent(outfile, level)
            outfile.write('model_.Property(\n')
            property_.exportLiteral(outfile, level, name_='Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'coords':
            coords_ = child_.text
            coords_ = self.gds_validate_string(coords_, node, 'coords')
            self.coords.append(coords_)
        elif nodeName_ == 'property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.property.append(obj_)
# end class Point


class Line(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('coords', 'xsd:string', 1),
        MemberSpec_('property', 'Property', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, coords=None, property=None):
        if coords is None:
            self.coords = []
        else:
            self.coords = coords
        if property is None:
            self.property = []
        else:
            self.property = property
    def factory(*args_, **kwargs_):
        if Line.subclass:
            return Line.subclass(*args_, **kwargs_)
        else:
            return Line(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_coords(self): return self.coords
    def set_coords(self, coords): self.coords = coords
    def add_coords(self, value): self.coords.append(value)
    def insert_coords(self, index, value): self.coords[index] = value
    def get_property(self): return self.property
    def set_property(self, property): self.property = property
    def add_property(self, value): self.property.append(value)
    def insert_property(self, index, value): self.property[index] = value
    def hasContent_(self):
        if (
            self.coords or
            self.property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Line', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Line')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Line'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Line', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for coords_ in self.coords:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scoords>%s</%scoords>%s' % (namespace_, self.gds_format_string(quote_xml(coords_).encode(ExternalEncoding), input_name='coords'), namespace_, eol_))
        for property_ in self.property:
            property_.export(outfile, level, namespace_, name_='property', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Line'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('coords=[\n')
        level += 1
        for coords_ in self.coords:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(coords_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('property=[\n')
        level += 1
        for property_ in self.property:
            showIndent(outfile, level)
            outfile.write('model_.Property(\n')
            property_.exportLiteral(outfile, level, name_='Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'coords':
            coords_ = child_.text
            coords_ = self.gds_validate_string(coords_, node, 'coords')
            self.coords.append(coords_)
        elif nodeName_ == 'property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.property.append(obj_)
# end class Line


class Face(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('coords', 'xsd:string', 1),
        MemberSpec_('property', 'Property', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, coords=None, property=None):
        if coords is None:
            self.coords = []
        else:
            self.coords = coords
        if property is None:
            self.property = []
        else:
            self.property = property
    def factory(*args_, **kwargs_):
        if Face.subclass:
            return Face.subclass(*args_, **kwargs_)
        else:
            return Face(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_coords(self): return self.coords
    def set_coords(self, coords): self.coords = coords
    def add_coords(self, value): self.coords.append(value)
    def insert_coords(self, index, value): self.coords[index] = value
    def get_property(self): return self.property
    def set_property(self, property): self.property = property
    def add_property(self, value): self.property.append(value)
    def insert_property(self, index, value): self.property[index] = value
    def hasContent_(self):
        if (
            self.coords or
            self.property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Face', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Face')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Face'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Face', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for coords_ in self.coords:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scoords>%s</%scoords>%s' % (namespace_, self.gds_format_string(quote_xml(coords_).encode(ExternalEncoding), input_name='coords'), namespace_, eol_))
        for property_ in self.property:
            property_.export(outfile, level, namespace_, name_='property', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Face'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('coords=[\n')
        level += 1
        for coords_ in self.coords:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(coords_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('property=[\n')
        level += 1
        for property_ in self.property:
            showIndent(outfile, level)
            outfile.write('model_.Property(\n')
            property_.exportLiteral(outfile, level, name_='Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'coords':
            coords_ = child_.text
            coords_ = self.gds_validate_string(coords_, node, 'coords')
            self.coords.append(coords_)
        elif nodeName_ == 'property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.property.append(obj_)
# end class Face


class Circle(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('coords', 'xsd:string', 0),
        MemberSpec_('radius', 'xsd:double', 0),
        MemberSpec_('property', 'Property', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, coords=None, radius=None, property=None):
        self.coords = coords
        self.radius = radius
        if property is None:
            self.property = []
        else:
            self.property = property
    def factory(*args_, **kwargs_):
        if Circle.subclass:
            return Circle.subclass(*args_, **kwargs_)
        else:
            return Circle(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_coords(self): return self.coords
    def set_coords(self, coords): self.coords = coords
    def get_radius(self): return self.radius
    def set_radius(self, radius): self.radius = radius
    def get_property(self): return self.property
    def set_property(self, property): self.property = property
    def add_property(self, value): self.property.append(value)
    def insert_property(self, index, value): self.property[index] = value
    def hasContent_(self):
        if (
            self.coords is not None or
            self.radius is not None or
            self.property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Circle', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Circle')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Circle'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Circle', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.coords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scoords>%s</%scoords>%s' % (namespace_, self.gds_format_string(quote_xml(self.coords).encode(ExternalEncoding), input_name='coords'), namespace_, eol_))
        if self.radius is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sradius>%s</%sradius>%s' % (namespace_, self.gds_format_double(self.radius, input_name='radius'), namespace_, eol_))
        for property_ in self.property:
            property_.export(outfile, level, namespace_, name_='property', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Circle'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.coords is not None:
            showIndent(outfile, level)
            outfile.write('coords=%s,\n' % quote_python(self.coords).encode(ExternalEncoding))
        if self.radius is not None:
            showIndent(outfile, level)
            outfile.write('radius=%e,\n' % self.radius)
        showIndent(outfile, level)
        outfile.write('property=[\n')
        level += 1
        for property_ in self.property:
            showIndent(outfile, level)
            outfile.write('model_.Property(\n')
            property_.exportLiteral(outfile, level, name_='Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'coords':
            coords_ = child_.text
            coords_ = self.gds_validate_string(coords_, node, 'coords')
            self.coords = coords_
        elif nodeName_ == 'radius':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'radius')
            self.radius = fval_
        elif nodeName_ == 'property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.property.append(obj_)
# end class Circle


class Sphere(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('coords', 'xsd:string', 0),
        MemberSpec_('radius', 'xsd:double', 0),
        MemberSpec_('property', 'Property', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, coords=None, radius=None, property=None):
        self.coords = coords
        self.radius = radius
        if property is None:
            self.property = []
        else:
            self.property = property
    def factory(*args_, **kwargs_):
        if Sphere.subclass:
            return Sphere.subclass(*args_, **kwargs_)
        else:
            return Sphere(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_coords(self): return self.coords
    def set_coords(self, coords): self.coords = coords
    def get_radius(self): return self.radius
    def set_radius(self, radius): self.radius = radius
    def get_property(self): return self.property
    def set_property(self, property): self.property = property
    def add_property(self, value): self.property.append(value)
    def insert_property(self, index, value): self.property[index] = value
    def hasContent_(self):
        if (
            self.coords is not None or
            self.radius is not None or
            self.property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Sphere', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Sphere')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Sphere'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Sphere', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.coords is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scoords>%s</%scoords>%s' % (namespace_, self.gds_format_string(quote_xml(self.coords).encode(ExternalEncoding), input_name='coords'), namespace_, eol_))
        if self.radius is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sradius>%s</%sradius>%s' % (namespace_, self.gds_format_double(self.radius, input_name='radius'), namespace_, eol_))
        for property_ in self.property:
            property_.export(outfile, level, namespace_, name_='property', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Sphere'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.coords is not None:
            showIndent(outfile, level)
            outfile.write('coords=%s,\n' % quote_python(self.coords).encode(ExternalEncoding))
        if self.radius is not None:
            showIndent(outfile, level)
            outfile.write('radius=%e,\n' % self.radius)
        showIndent(outfile, level)
        outfile.write('property=[\n')
        level += 1
        for property_ in self.property:
            showIndent(outfile, level)
            outfile.write('model_.Property(\n')
            property_.exportLiteral(outfile, level, name_='Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'coords':
            coords_ = child_.text
            coords_ = self.gds_validate_string(coords_, node, 'coords')
            self.coords = coords_
        elif nodeName_ == 'radius':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'radius')
            self.radius = fval_
        elif nodeName_ == 'property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.property.append(obj_)
# end class Sphere


class Graph(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('property', 'Property', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, property=None):
        if property is None:
            self.property = []
        else:
            self.property = property
    def factory(*args_, **kwargs_):
        if Graph.subclass:
            return Graph.subclass(*args_, **kwargs_)
        else:
            return Graph(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_property(self): return self.property
    def set_property(self, property): self.property = property
    def add_property(self, value): self.property.append(value)
    def insert_property(self, index, value): self.property[index] = value
    def hasContent_(self):
        if (
            self.property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Graph', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Graph')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Graph'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Graph', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for property_ in self.property:
            property_.export(outfile, level, namespace_, name_='property', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Graph'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('property=[\n')
        level += 1
        for property_ in self.property:
            showIndent(outfile, level)
            outfile.write('model_.Property(\n')
            property_.exportLiteral(outfile, level, name_='Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'property':
            obj_ = Property.factory()
            obj_.build(child_)
            self.property.append(obj_)
# end class Graph


class Measurement(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('objectRef', 'xsd:string', 0),
        MemberSpec_('point', 'Point', 0),
        MemberSpec_('line', 'Line', 0),
        MemberSpec_('face', 'Face', 0),
        MemberSpec_('circle', 'Circle', 0),
        MemberSpec_('sphere', 'Sphere', 0),
        MemberSpec_('graph', 'Graph', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, objectRef=None, point=None, line=None, face=None, circle=None, sphere=None, graph=None):
        self.objectRef = objectRef
        self.point = point
        self.line = line
        self.face = face
        self.circle = circle
        self.sphere = sphere
        self.graph = graph
    def factory(*args_, **kwargs_):
        if Measurement.subclass:
            return Measurement.subclass(*args_, **kwargs_)
        else:
            return Measurement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_objectRef(self): return self.objectRef
    def set_objectRef(self, objectRef): self.objectRef = objectRef
    def get_point(self): return self.point
    def set_point(self, point): self.point = point
    def get_line(self): return self.line
    def set_line(self, line): self.line = line
    def get_face(self): return self.face
    def set_face(self, face): self.face = face
    def get_circle(self): return self.circle
    def set_circle(self, circle): self.circle = circle
    def get_sphere(self): return self.sphere
    def set_sphere(self, sphere): self.sphere = sphere
    def get_graph(self): return self.graph
    def set_graph(self, graph): self.graph = graph
    def hasContent_(self):
        if (
            self.objectRef is not None or
            self.point is not None or
            self.line is not None or
            self.face is not None or
            self.circle is not None or
            self.sphere is not None or
            self.graph is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Measurement', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Measurement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Measurement'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Measurement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.objectRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjectRef>%s</%sobjectRef>%s' % (namespace_, self.gds_format_string(quote_xml(self.objectRef).encode(ExternalEncoding), input_name='objectRef'), namespace_, eol_))
        if self.point is not None:
            self.point.export(outfile, level, namespace_, name_='point', pretty_print=pretty_print)
        if self.line is not None:
            self.line.export(outfile, level, namespace_, name_='line', pretty_print=pretty_print)
        if self.face is not None:
            self.face.export(outfile, level, namespace_, name_='face', pretty_print=pretty_print)
        if self.circle is not None:
            self.circle.export(outfile, level, namespace_, name_='circle', pretty_print=pretty_print)
        if self.sphere is not None:
            self.sphere.export(outfile, level, namespace_, name_='sphere', pretty_print=pretty_print)
        if self.graph is not None:
            self.graph.export(outfile, level, namespace_, name_='graph', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Measurement'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.objectRef is not None:
            showIndent(outfile, level)
            outfile.write('objectRef=%s,\n' % quote_python(self.objectRef).encode(ExternalEncoding))
        if self.point is not None:
            showIndent(outfile, level)
            outfile.write('point=model_.Point(\n')
            self.point.exportLiteral(outfile, level, name_='point')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.line is not None:
            showIndent(outfile, level)
            outfile.write('line=model_.Line(\n')
            self.line.exportLiteral(outfile, level, name_='line')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.face is not None:
            showIndent(outfile, level)
            outfile.write('face=model_.Face(\n')
            self.face.exportLiteral(outfile, level, name_='face')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.circle is not None:
            showIndent(outfile, level)
            outfile.write('circle=model_.Circle(\n')
            self.circle.exportLiteral(outfile, level, name_='circle')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.sphere is not None:
            showIndent(outfile, level)
            outfile.write('sphere=model_.Sphere(\n')
            self.sphere.exportLiteral(outfile, level, name_='sphere')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.graph is not None:
            showIndent(outfile, level)
            outfile.write('graph=model_.Graph(\n')
            self.graph.exportLiteral(outfile, level, name_='graph')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'objectRef':
            objectRef_ = child_.text
            objectRef_ = self.gds_validate_string(objectRef_, node, 'objectRef')
            self.objectRef = objectRef_
        elif nodeName_ == 'point':
            obj_ = Point.factory()
            obj_.build(child_)
            self.set_point(obj_)
        elif nodeName_ == 'line':
            obj_ = Line.factory()
            obj_.build(child_)
            self.set_line(obj_)
        elif nodeName_ == 'face':
            obj_ = Face.factory()
            obj_.build(child_)
            self.set_face(obj_)
        elif nodeName_ == 'circle':
            obj_ = Circle.factory()
            obj_.build(child_)
            self.set_circle(obj_)
        elif nodeName_ == 'sphere':
            obj_ = Sphere.factory()
            obj_.build(child_)
            self.set_sphere(obj_)
        elif nodeName_ == 'graph':
            obj_ = Graph.factory()
            obj_.build(child_)
            self.set_graph(obj_)
# end class Measurement


class Component(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('componentID', 'xsd:string', 0),
        MemberSpec_('componentName', 'xsd:string', 0),
        MemberSpec_('time', 'xsd:double', 0),
        MemberSpec_('groupID', 'xsd:string', 1),
        MemberSpec_('prevID', 'xsd:string', 1),
        MemberSpec_('measurement', 'Measurement', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, componentID=None, componentName=None, time=None, groupID=None, prevID=None, measurement=None):
        self.componentID = componentID
        self.componentName = componentName
        self.time = time
        if groupID is None:
            self.groupID = []
        else:
            self.groupID = groupID
        if prevID is None:
            self.prevID = []
        else:
            self.prevID = prevID
        if measurement is None:
            self.measurement = []
        else:
            self.measurement = measurement
    def factory(*args_, **kwargs_):
        if Component.subclass:
            return Component.subclass(*args_, **kwargs_)
        else:
            return Component(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_componentID(self): return self.componentID
    def set_componentID(self, componentID): self.componentID = componentID
    def get_componentName(self): return self.componentName
    def set_componentName(self, componentName): self.componentName = componentName
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_groupID(self): return self.groupID
    def set_groupID(self, groupID): self.groupID = groupID
    def add_groupID(self, value): self.groupID.append(value)
    def insert_groupID(self, index, value): self.groupID[index] = value
    def get_prevID(self): return self.prevID
    def set_prevID(self, prevID): self.prevID = prevID
    def add_prevID(self, value): self.prevID.append(value)
    def insert_prevID(self, index, value): self.prevID[index] = value
    def get_measurement(self): return self.measurement
    def set_measurement(self, measurement): self.measurement = measurement
    def add_measurement(self, value): self.measurement.append(value)
    def insert_measurement(self, index, value): self.measurement[index] = value
    def hasContent_(self):
        if (
            self.componentID is not None or
            self.componentName is not None or
            self.time is not None or
            self.groupID or
            self.prevID or
            self.measurement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Component', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Component')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Component'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Component', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.componentID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomponentID>%s</%scomponentID>%s' % (namespace_, self.gds_format_string(quote_xml(self.componentID).encode(ExternalEncoding), input_name='componentID'), namespace_, eol_))
        if self.componentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomponentName>%s</%scomponentName>%s' % (namespace_, self.gds_format_string(quote_xml(self.componentName).encode(ExternalEncoding), input_name='componentName'), namespace_, eol_))
        if self.time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stime>%s</%stime>%s' % (namespace_, self.gds_format_double(self.time, input_name='time'), namespace_, eol_))
        for groupID_ in self.groupID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupID>%s</%sgroupID>%s' % (namespace_, self.gds_format_string(quote_xml(groupID_).encode(ExternalEncoding), input_name='groupID'), namespace_, eol_))
        for prevID_ in self.prevID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprevID>%s</%sprevID>%s' % (namespace_, self.gds_format_string(quote_xml(prevID_).encode(ExternalEncoding), input_name='prevID'), namespace_, eol_))
        for measurement_ in self.measurement:
            measurement_.export(outfile, level, namespace_, name_='measurement', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Component'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.componentID is not None:
            showIndent(outfile, level)
            outfile.write('componentID=%s,\n' % quote_python(self.componentID).encode(ExternalEncoding))
        if self.componentName is not None:
            showIndent(outfile, level)
            outfile.write('componentName=%s,\n' % quote_python(self.componentName).encode(ExternalEncoding))
        if self.time is not None:
            showIndent(outfile, level)
            outfile.write('time=%e,\n' % self.time)
        showIndent(outfile, level)
        outfile.write('groupID=[\n')
        level += 1
        for groupID_ in self.groupID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(groupID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('prevID=[\n')
        level += 1
        for prevID_ in self.prevID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(prevID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('measurement=[\n')
        level += 1
        for measurement_ in self.measurement:
            showIndent(outfile, level)
            outfile.write('model_.Measurement(\n')
            measurement_.exportLiteral(outfile, level, name_='Measurement')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'componentID':
            componentID_ = child_.text
            componentID_ = self.gds_validate_string(componentID_, node, 'componentID')
            self.componentID = componentID_
        elif nodeName_ == 'componentName':
            componentName_ = child_.text
            componentName_ = self.gds_validate_string(componentName_, node, 'componentName')
            self.componentName = componentName_
        elif nodeName_ == 'time':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'time')
            self.time = fval_
        elif nodeName_ == 'groupID':
            groupID_ = child_.text
            groupID_ = self.gds_validate_string(groupID_, node, 'groupID')
            self.groupID.append(groupID_)
        elif nodeName_ == 'prevID':
            prevID_ = child_.text
            prevID_ = self.gds_validate_string(prevID_, node, 'prevID')
            self.prevID.append(prevID_)
        elif nodeName_ == 'measurement':
            obj_ = Measurement.factory()
            obj_.build(child_)
            self.measurement.append(obj_)
# end class Component


class Data(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('scaleUnit', 'ScaleUnit', 0),
        MemberSpec_('object', 'Object', 1),
        MemberSpec_('feature', 'Feature', 1),
        MemberSpec_('component', 'Component', 1),
    ]
    subclass = None
    superclass = None
    def __init__(self, scaleUnit=None, object=None, feature=None, component=None):
        self.scaleUnit = scaleUnit
        if object is None:
            self.object = []
        else:
            self.object = object
        if feature is None:
            self.feature = []
        else:
            self.feature = feature
        if component is None:
            self.component = []
        else:
            self.component = component
    def factory(*args_, **kwargs_):
        if Data.subclass:
            return Data.subclass(*args_, **kwargs_)
        else:
            return Data(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_scaleUnit(self): return self.scaleUnit
    def set_scaleUnit(self, scaleUnit): self.scaleUnit = scaleUnit
    def get_object(self): return self.object
    def set_object(self, object): self.object = object
    def add_object(self, value): self.object.append(value)
    def insert_object(self, index, value): self.object[index] = value
    def get_feature(self): return self.feature
    def set_feature(self, feature): self.feature = feature
    def add_feature(self, value): self.feature.append(value)
    def insert_feature(self, index, value): self.feature[index] = value
    def get_component(self): return self.component
    def set_component(self, component): self.component = component
    def add_component(self, value): self.component.append(value)
    def insert_component(self, index, value): self.component[index] = value
    def hasContent_(self):
        if (
            self.scaleUnit is not None or
            self.object or
            self.feature or
            self.component
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Data', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Data')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Data'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Data', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.scaleUnit is not None:
            self.scaleUnit.export(outfile, level, namespace_, name_='scaleUnit', pretty_print=pretty_print)
        for object_ in self.object:
            object_.export(outfile, level, namespace_, name_='object', pretty_print=pretty_print)
        for feature_ in self.feature:
            feature_.export(outfile, level, namespace_, name_='feature', pretty_print=pretty_print)
        for component_ in self.component:
            component_.export(outfile, level, namespace_, name_='component', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='Data'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.scaleUnit is not None:
            showIndent(outfile, level)
            outfile.write('scaleUnit=model_.ScaleUnit(\n')
            self.scaleUnit.exportLiteral(outfile, level, name_='scaleUnit')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('object=[\n')
        level += 1
        for object_ in self.object:
            showIndent(outfile, level)
            outfile.write('model_.Object(\n')
            object_.exportLiteral(outfile, level, name_='Object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('feature=[\n')
        level += 1
        for feature_ in self.feature:
            showIndent(outfile, level)
            outfile.write('model_.Feature(\n')
            feature_.exportLiteral(outfile, level, name_='Feature')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('component=[\n')
        level += 1
        for component_ in self.component:
            showIndent(outfile, level)
            outfile.write('model_.Component(\n')
            component_.exportLiteral(outfile, level, name_='Component')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'scaleUnit':
            obj_ = ScaleUnit.factory()
            obj_.build(child_)
            self.set_scaleUnit(obj_)
        elif nodeName_ == 'object':
            obj_ = Object.factory()
            obj_.build(child_)
            self.object.append(obj_)
        elif nodeName_ == 'feature':
            obj_ = Feature.factory()
            obj_.build(child_)
            self.feature.append(obj_)
        elif nodeName_ == 'component':
            obj_ = Component.factory()
            obj_.build(child_)
            self.component.append(obj_)
# end class Data


class bdmlDocument(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('version', 'xsd:string', 0),
        MemberSpec_('info', 'Info', 0),
        MemberSpec_('summary', 'Summary', 0),
        MemberSpec_('contact', 'Contact', 0),
        MemberSpec_('methods', 'Methods', 0),
        MemberSpec_('data', 'Data', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, version=None, info=None, summary=None, contact=None, methods=None, data=None):
        self.version = _cast(None, version)
        self.info = info
        self.summary = summary
        self.contact = contact
        self.methods = methods
        self.data = data
    def factory(*args_, **kwargs_):
        if bdmlDocument.subclass:
            return bdmlDocument.subclass(*args_, **kwargs_)
        else:
            return bdmlDocument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_info(self): return self.info
    def set_info(self, info): self.info = info
    def get_summary(self): return self.summary
    def set_summary(self, summary): self.summary = summary
    def get_contact(self): return self.contact
    def set_contact(self, contact): self.contact = contact
    def get_methods(self): return self.methods
    def set_methods(self, methods): self.methods = methods
    def get_data(self): return self.data
    def set_data(self, data): self.data = data
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def hasContent_(self):
        if (
            self.info is not None or
            self.summary is not None or
            self.contact is not None or
            self.methods is not None or
            self.data is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='bdmlDocument', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bdmlDocument')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bdmlDocument'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='bdmlDocument', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.info is not None:
            self.info.export(outfile, level, namespace_, name_='info', pretty_print=pretty_print)
        if self.summary is not None:
            self.summary.export(outfile, level, namespace_, name_='summary', pretty_print=pretty_print)
        if self.contact is not None:
            self.contact.export(outfile, level, namespace_, name_='contact', pretty_print=pretty_print)
        if self.methods is not None:
            self.methods.export(outfile, level, namespace_, name_='methods', pretty_print=pretty_print)
        if self.data is not None:
            self.data.export(outfile, level, namespace_, name_='data', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='bdmlDocument'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.info is not None:
            showIndent(outfile, level)
            outfile.write('info=model_.Info(\n')
            self.info.exportLiteral(outfile, level, name_='info')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.summary is not None:
            showIndent(outfile, level)
            outfile.write('summary=model_.Summary(\n')
            self.summary.exportLiteral(outfile, level, name_='summary')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.contact is not None:
            showIndent(outfile, level)
            outfile.write('contact=model_.Contact(\n')
            self.contact.exportLiteral(outfile, level, name_='contact')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.methods is not None:
            showIndent(outfile, level)
            outfile.write('methods=model_.Methods(\n')
            self.methods.exportLiteral(outfile, level, name_='methods')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.data is not None:
            showIndent(outfile, level)
            outfile.write('data=model_.Data(\n')
            self.data.exportLiteral(outfile, level, name_='data')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'info':
            obj_ = Info.factory()
            obj_.build(child_)
            self.set_info(obj_)
        elif nodeName_ == 'summary':
            obj_ = Summary.factory()
            obj_.build(child_)
            self.set_summary(obj_)
        elif nodeName_ == 'contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.set_contact(obj_)
        elif nodeName_ == 'methods':
            obj_ = Methods.factory()
            obj_.build(child_)
            self.set_methods(obj_)
        elif nodeName_ == 'data':
            obj_ = Data.factory()
            obj_.build(child_)
            self.set_data(obj_)
# end class bdmlDocument


GDSClassesMapping = {
    'info': Info,
    'methods': Methods,
    'point': Point,
    'graph': Graph,
    'object': Object,
    'component': Component,
    'feature': Feature,
    'face': Face,
    'sphere': Sphere,
    'contact': Contact,
    'summary': Summary,
    'scaleUnit': ScaleUnit,
    'measurement': Measurement,
    'bdml': bdmlDocument,
    'line': Line,
    'property': Property,
    'data': Data,
    'circle': Circle,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Info'
        rootClass = Info
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(
        sys.stdout, 0, name_=rootTag,
        namespacedef_='',
        pretty_print=True)
    return rootObj


def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Info'
        rootClass = Info
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    content = etree_.tostring(
        rootElement, pretty_print=True,
        xml_declaration=True, encoding="utf-8")
    sys.stdout.write(content)
    sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    roots = get_root_tag(rootNode)
    rootClass = roots[1]
    if rootClass is None:
        rootClass = Info
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(
        sys.stdout, 0, name_="Info",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Info'
        rootClass = Info
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from bdmllib import *\n\n')
    sys.stdout.write('import bdmllib as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Circle",
    "Component",
    "Contact",
    "Data",
    "Face",
    "Feature",
    "Graph",
    "Info",
    "Line",
    "Measurement",
    "Methods",
    "Object",
    "Point",
    "Property",
    "ScaleUnit",
    "Sphere",
    "Summary",
    "bdmlDocument"
]
